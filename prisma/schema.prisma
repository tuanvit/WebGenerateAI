// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  school      String?
  subjects    String?  // JSON string for SQLite
  gradeLevel  String?  // JSON string for SQLite
  role        String   @default("user") // user, admin
  createdAt   DateTime @default(now())
  lastLoginAt DateTime @default(now())

  // Relations
  generatedPrompts   GeneratedPrompt[]
  sharedContent      SharedContent[]
  contentRatings     ContentRating[]
  userLibraries      UserLibrary[]
  accounts           Account[]
  sessions           Session[]
  reportedContent    ModerationReport[] @relation("ReportedBy")
  reviewedReports    ModerationReport[] @relation("ReviewedBy")
  adminAuditLogs     AdminAuditLog[]

  @@map("users")
}

model GeneratedPrompt {
  id               String   @id @default(cuid())
  userId           String
  inputParameters  Json
  generatedText    String
  targetTool       String
  createdAt        DateTime @default(now())
  isShared         Boolean  @default(false)
  tags             String?  // JSON string for SQLite

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions PromptVersion[]

  @@map("generated_prompts")
}

model SharedContent {
  id          String   @id @default(cuid())
  authorId    String
  title       String
  description String
  content     String
  subject     String
  gradeLevel  Int      // Restricted to grades 6-9 only
  tags        String?  // JSON string for SQLite
  rating      Float    @default(0)
  ratingCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author            User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  contentRatings    ContentRating[]
  userLibraries     UserLibrary[]
  moderationReports ModerationReport[]

  @@map("shared_content")
}

model ContentRating {
  id        String   @id @default(cuid())
  userId    String
  contentId String
  rating    Int      // 1-5 scale
  comment   String?  // Optional comment
  createdAt DateTime @default(now())

  // Relations
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  content SharedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@map("content_ratings")
}

model UserLibrary {
  id        String   @id @default(cuid())
  userId    String
  contentId String
  savedAt   DateTime @default(now())

  // Relations
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  content SharedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@map("user_libraries")
}

model PromptVersion {
  id       String   @id @default(cuid())
  promptId String
  version  Int
  content  String
  createdAt DateTime @default(now())

  // Relations
  prompt GeneratedPrompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([promptId, version])
  @@map("prompt_versions")
}

model ModerationReport {
  id             String   @id @default(cuid())
  contentId      String
  reporterId     String
  flag           String   // ModerationFlag enum values
  reason         String
  status         String   @default("pending") // pending, reviewed, resolved, dismissed
  createdAt      DateTime @default(now())
  reviewedAt     DateTime?
  reviewedBy     String?
  moderatorNotes String?

  // Relations
  content  SharedContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
  reporter User          @relation("ReportedBy", fields: [reporterId], references: [id], onDelete: Cascade)
  reviewer User?         @relation("ReviewedBy", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@map("moderation_reports")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Admin Management System Tables

model AITool {
  id                      String   @id @default(cuid())
  name                    String
  description             String
  url                     String
  category                String   // TEXT_GENERATION, PRESENTATION, IMAGE, VIDEO, SIMULATION, ASSESSMENT, DATA_ANALYSIS
  subjects                String   // JSON array for SQLite
  gradeLevel              String   // JSON array for SQLite
  useCase                 String
  vietnameseSupport       Boolean  @default(false)
  difficulty              String   // beginner, intermediate, advanced
  features                String   // JSON array for SQLite
  pricingModel            String   // free, freemium, paid
  integrationInstructions String?
  samplePrompts           String?  // JSON array for SQLite
  relatedTools            String?  // JSON array for SQLite
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@index([category])
  @@index([vietnameseSupport])
  @@index([difficulty])
  @@index([pricingModel])
  @@map("ai_tools")
}

model Template {
  id               String   @id @default(cuid())
  name             String
  description      String
  subject          String
  gradeLevel       String   // JSON array for SQLite
  outputType       String   // lesson-plan, presentation, assessment, interactive, research
  templateContent  String
  recommendedTools String?  // JSON array for SQLite
  tags             String?  // JSON array for SQLite
  difficulty       String   // beginner, intermediate, advanced
  compliance       String?  // JSON array for SQLite (GDPT 2018, CV 5512, etc.)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  variables TemplateVariable[]
  examples  TemplateExample[]

  @@index([subject])
  @@index([outputType])
  @@index([difficulty])
  @@map("templates")
}

model TemplateVariable {
  id           String  @id @default(cuid())
  templateId   String
  name         String
  label        String
  description  String?
  type         String  // text, textarea, select, multiselect
  required     Boolean @default(false)
  placeholder  String?
  options      String? // JSON array for SQLite
  defaultValue String?

  // Relations
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@map("template_variables")
}

model TemplateExample {
  id             String @id @default(cuid())
  templateId     String
  title          String
  description    String
  sampleInput    String // JSON object for SQLite
  expectedOutput String

  // Relations
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@map("template_examples")
}

model AdminAuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // CREATE, UPDATE, DELETE, BULK_UPDATE, BULK_DELETE, IMPORT, EXPORT
  resource  String   // ai_tools, templates, users
  resourceId String?
  details   String?  // JSON object for SQLite
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("admin_audit_logs")
}

model AdminBackup {
  id             String   @id @default(cuid())
  name           String
  description    String?
  createdBy      String
  type           String   // manual, automatic
  status         String   // creating, completed, failed
  aiToolsCount   Int      @default(0)
  templatesCount Int      @default(0)
  size           Int      @default(0)
  checksum       String   @default("")
  data           String?  // JSON backup data
  createdAt      DateTime @default(now())

  @@index([createdBy])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("admin_backups")
}

model AdminSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   // JSON value
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@map("admin_settings")
}
